#version 460
#extension GL_EXT_ray_tracing : require

layout(push_constant) uniform PushConstants {
	mat4 mCameraTransform;
    int mMaxRecursions;
} pushConstants;

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 0, rgba8) uniform image2D image;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

struct Payload 
{
    Ray ray;
    int cnt;
    bool hit;
};

layout(location = 0) rayPayloadEXT Payload hitValue;

void main() 
{
    const vec2 pixelCenter =      vec2(gl_LaunchIDEXT.xy  ) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

    // We are constructing the view rays in WORLD SPACE. 
    // This means: 
    //  ->  Forward is the camera's -Z direction
    //  ->  +Y axis is pointing up 
    //  ->  +X is pointing to the right
    vec2 d = inUV * 2.0 - 1.0;
    float aspectRatio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);
	
    vec3 origin = vec3(0.0, 0.0, 0.0);
    //                                                 Up == +Y in World, but UV-coordinates have +Y pointing down
    //                                                   |    Forward == -Z n World Space
    //                                                   |      |
    //                                                   v      v 
    vec3 direction = normalize(vec3(d.x * aspectRatio, -d.y, -sqrt(3))); // 1 => sqrt(3) is the scaling factor from a fov of 90 to 60
	vec4 p1 = vec4(origin, 1.0);
	vec4 p2 = vec4(origin + direction, 1.0);
	vec4 vp1 = pushConstants.mCameraTransform * p1;
	vec4 vp2 = pushConstants.mCameraTransform * p2;
	origin = vec3(vp1);
	direction = vec3(normalize(vp2 - vp1));
	
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(gl_LaunchIDEXT.x / 1000.0, gl_LaunchIDEXT.y / 1000.0, 0.0, 0.0));

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 100.0;
    hitValue.cnt = 0;
    hitValue.hit = true;
    traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, origin, tmin, direction, tmax, 0 /*payload*/);

    vec4 color = vec4(0.0, 0.1, 0.3, 1.0);
    if (hitValue.hit) {
        color.r += float((hitValue.cnt >> 0) & 0x1) * 0.7;
        color.g += float((hitValue.cnt >> 1) & 0x1) * 0.7;
        color.b += float((hitValue.cnt >> 2) & 0x1) * 0.7;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), color);
}
